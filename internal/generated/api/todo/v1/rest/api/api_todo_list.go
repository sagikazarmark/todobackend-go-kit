/*
 * Todo API
 *
 * The Todo API manages a list of todo items as described by the TodoMVC backend project: http://todobackend.com 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// TodoListApiController binds http requests to an api service and writes the service results to the http response
type TodoListApiController struct {
	service TodoListApiServicer
	errorHandler ErrorHandler
}

// TodoListApiOption for how the controller is set up.
type TodoListApiOption func(*TodoListApiController)

// WithTodoListApiErrorHandler inject ErrorHandler into controller
func WithTodoListApiErrorHandler(h ErrorHandler) TodoListApiOption {
	return func(c *TodoListApiController) {
		c.errorHandler = h
	}
}

// NewTodoListApiController creates a default api controller
func NewTodoListApiController(s TodoListApiServicer, opts ...TodoListApiOption) Router {
	controller := &TodoListApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TodoListApiController
func (c *TodoListApiController) Routes() Routes {
	return Routes{ 
		{
			"AddItem",
			strings.ToUpper("Post"),
			"/todos/todos",
			c.AddItem,
		},
		{
			"DeleteItem",
			strings.ToUpper("Delete"),
			"/todos/todos/{id}",
			c.DeleteItem,
		},
		{
			"DeleteItems",
			strings.ToUpper("Delete"),
			"/todos/todos",
			c.DeleteItems,
		},
		{
			"GetItem",
			strings.ToUpper("Get"),
			"/todos/todos/{id}",
			c.GetItem,
		},
		{
			"ListItems",
			strings.ToUpper("Get"),
			"/todos/todos",
			c.ListItems,
		},
		{
			"UpdateItem",
			strings.ToUpper("Patch"),
			"/todos/todos/{id}",
			c.UpdateItem,
		},
	}
}

// AddItem - Add a new item to the list
func (c *TodoListApiController) AddItem(w http.ResponseWriter, r *http.Request) {
	addTodoItemRequestParam := AddTodoItemRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addTodoItemRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddTodoItemRequestRequired(addTodoItemRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddItem(r.Context(), addTodoItemRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteItem - Delete an item
func (c *TodoListApiController) DeleteItem(w http.ResponseWriter, r *http.Request) {
	idParam := chi.URLParam(r, "id")
	
	result, err := c.service.DeleteItem(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteItems - Delete all items
func (c *TodoListApiController) DeleteItems(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.DeleteItems(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetItem - Get an item
func (c *TodoListApiController) GetItem(w http.ResponseWriter, r *http.Request) {
	idParam := chi.URLParam(r, "id")
	
	result, err := c.service.GetItem(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListItems - List items
func (c *TodoListApiController) ListItems(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListItems(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateItem - Update an existing item
func (c *TodoListApiController) UpdateItem(w http.ResponseWriter, r *http.Request) {
	idParam := chi.URLParam(r, "id")
	
	updateTodoItemRequestParam := UpdateTodoItemRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateTodoItemRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateTodoItemRequestRequired(updateTodoItemRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateItem(r.Context(), idParam, updateTodoItemRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
