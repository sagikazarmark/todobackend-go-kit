// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Todo API
 *
 * The Todo API manages a list of todo items as described by the TodoMVC backend project: http://todobackend.com 
 *
 * API version: 1.0.0
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// TodoListAPIController binds http requests to an api service and writes the service results to the http response
type TodoListAPIController struct {
	service TodoListAPIServicer
	errorHandler ErrorHandler
}

// TodoListAPIOption for how the controller is set up.
type TodoListAPIOption func(*TodoListAPIController)

// WithTodoListAPIErrorHandler inject ErrorHandler into controller
func WithTodoListAPIErrorHandler(h ErrorHandler) TodoListAPIOption {
	return func(c *TodoListAPIController) {
		c.errorHandler = h
	}
}

// NewTodoListAPIController creates a default api controller
func NewTodoListAPIController(s TodoListAPIServicer, opts ...TodoListAPIOption) *TodoListAPIController {
	controller := &TodoListAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TodoListAPIController
func (c *TodoListAPIController) Routes() Routes {
	return Routes{
		"AddItem": Route{
			strings.ToUpper("Post"),
			"/todos/todos",
			c.AddItem,
		},
		"DeleteItem": Route{
			strings.ToUpper("Delete"),
			"/todos/todos/{id}",
			c.DeleteItem,
		},
		"DeleteItems": Route{
			strings.ToUpper("Delete"),
			"/todos/todos",
			c.DeleteItems,
		},
		"GetItem": Route{
			strings.ToUpper("Get"),
			"/todos/todos/{id}",
			c.GetItem,
		},
		"ListItems": Route{
			strings.ToUpper("Get"),
			"/todos/todos",
			c.ListItems,
		},
		"UpdateItem": Route{
			strings.ToUpper("Patch"),
			"/todos/todos/{id}",
			c.UpdateItem,
		},
	}
}

// AddItem - Add a new item to the list
func (c *TodoListAPIController) AddItem(w http.ResponseWriter, r *http.Request) {
	addTodoItemRequestParam := AddTodoItemRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addTodoItemRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddTodoItemRequestRequired(addTodoItemRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddTodoItemRequestConstraints(addTodoItemRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddItem(r.Context(), addTodoItemRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteItem - Delete an item
func (c *TodoListAPIController) DeleteItem(w http.ResponseWriter, r *http.Request) {
	idParam := chi.URLParam(r, "id")
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.DeleteItem(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteItems - Delete all items
func (c *TodoListAPIController) DeleteItems(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.DeleteItems(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetItem - Get an item
func (c *TodoListAPIController) GetItem(w http.ResponseWriter, r *http.Request) {
	idParam := chi.URLParam(r, "id")
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetItem(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListItems - List items
func (c *TodoListAPIController) ListItems(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListItems(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateItem - Update an existing item
func (c *TodoListAPIController) UpdateItem(w http.ResponseWriter, r *http.Request) {
	idParam := chi.URLParam(r, "id")
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	updateTodoItemRequestParam := UpdateTodoItemRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateTodoItemRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateTodoItemRequestRequired(updateTodoItemRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateTodoItemRequestConstraints(updateTodoItemRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateItem(r.Context(), idParam, updateTodoItemRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
