/*
 * Todo API
 *
 * The Todo API manages a list of todo items as described by the TodoMVC backend project: http://todobackend.com 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package todov1

import (
	"encoding/json"
)

// TodoItem struct for TodoItem
type TodoItem struct {
	Id string `json:"id"`
	Title string `json:"title"`
	Completed bool `json:"completed"`
	Order int32 `json:"order"`
	Url string `json:"url"`
}

// NewTodoItem instantiates a new TodoItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTodoItem(id string, title string, completed bool, order int32, url string) *TodoItem {
	this := TodoItem{}
	this.Id = id
	this.Title = title
	this.Completed = completed
	this.Order = order
	this.Url = url
	return &this
}

// NewTodoItemWithDefaults instantiates a new TodoItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTodoItemWithDefaults() *TodoItem {
	this := TodoItem{}
	return &this
}

// GetId returns the Id field value
func (o *TodoItem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TodoItem) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TodoItem) SetId(v string) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *TodoItem) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *TodoItem) GetTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *TodoItem) SetTitle(v string) {
	o.Title = v
}

// GetCompleted returns the Completed field value
func (o *TodoItem) GetCompleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value
// and a boolean to check if the value has been set.
func (o *TodoItem) GetCompletedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Completed, true
}

// SetCompleted sets field value
func (o *TodoItem) SetCompleted(v bool) {
	o.Completed = v
}

// GetOrder returns the Order field value
func (o *TodoItem) GetOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *TodoItem) GetOrderOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *TodoItem) SetOrder(v int32) {
	o.Order = v
}

// GetUrl returns the Url field value
func (o *TodoItem) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *TodoItem) GetUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *TodoItem) SetUrl(v string) {
	o.Url = v
}

func (o TodoItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["completed"] = o.Completed
	}
	if true {
		toSerialize["order"] = o.Order
	}
	if true {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableTodoItem struct {
	value *TodoItem
	isSet bool
}

func (v NullableTodoItem) Get() *TodoItem {
	return v.value
}

func (v *NullableTodoItem) Set(val *TodoItem) {
	v.value = val
	v.isSet = true
}

func (v NullableTodoItem) IsSet() bool {
	return v.isSet
}

func (v *NullableTodoItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTodoItem(val *TodoItem) *NullableTodoItem {
	return &NullableTodoItem{value: val, isSet: true}
}

func (v NullableTodoItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTodoItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


